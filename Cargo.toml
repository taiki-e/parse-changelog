[package]
name = "parse-changelog"
version = "0.6.7" #publish:version
edition = "2021"
rust-version = "1.70"
license = "Apache-2.0 OR MIT"
repository = "https://github.com/taiki-e/parse-changelog"
keywords = ["changelog", "parser"]
categories = ["command-line-utilities", "parser-implementations"]
exclude = ["/.*", "/tools"]
description = """
Simple changelog parser, written in Rust.
"""

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu"]

[package.metadata.binstall]
pkg-url = "{ repo }/releases/download/v{ version }/{ name }-{ target }.tar.gz"
bin-dir = "{ bin }{ binary-ext }"
pkg-fmt = "tgz"

[package.metadata.cargo_check_external_types]
# The following are external types that are allowed to be exposed in our public API.
allowed_external_types = [
    "indexmap::*",
    "serde::*",
]

[lib]
doc-scrape-examples = false

[[bin]]
name = "parse-changelog"
required-features = ["default"]

[features]
# When using this crate as a library, we recommend disabling the default features.
default = ["anyhow", "lexopt", "serde", "serde_json"]
# Implements serde::Serialize trait for parse-changelog types.
serde = ["dep:serde", "dep:serde_derive", "indexmap/serde"]

# Note: indexmap and serde are public dependencies.
[dependencies]
indexmap = "2"
memchr = "2.4"
regex = "1.3"

anyhow = { version = "1.0.34", optional = true }
lexopt = { version = "0.3", optional = true }
serde = { version = "1.0.165", optional = true }
serde_derive = { version = "1.0.165", optional = true }
serde_json = { version = "1", optional = true }

[dev-dependencies]
easy-ext = "1"

[lints]
workspace = true

[workspace]
resolver = "2"
members = ["bench", "tools/codegen"]

# This table is shared by projects under github.com/taiki-e.
# It is not intended for manual editing.
[workspace.lints.rust]
improper_ctypes = "warn"
improper_ctypes_definitions = "warn"
non_ascii_idents = "warn"
rust_2018_idioms = "warn"
single_use_lifetimes = "warn"
unreachable_pub = "warn"
unsafe_op_in_unsafe_fn = "warn"
[workspace.lints.clippy]
all = "warn" # Downgrade deny-by-default lints
pedantic = "warn"
as_ptr_cast_mut = "warn"
default_union_representation = "warn"
inline_asm_x86_att_syntax = "warn"
trailing_empty_array = "warn"
transmute_undefined_repr = "warn"
undocumented_unsafe_blocks = "warn"
# Suppress buggy or noisy clippy lints
bool_assert_comparison = { level = "allow", priority = 1 }
borrow_as_ptr = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/8286
declare_interior_mutable_const = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/7665
doc_markdown = { level = "allow", priority = 1 }
float_cmp = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/7725
manual_assert = { level = "allow", priority = 1 }
manual_range_contains = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/6455#issuecomment-1225966395
missing_errors_doc = { level = "allow", priority = 1 }
module_name_repetitions = { level = "allow", priority = 1 }
nonminimal_bool = { level = "allow", priority = 1 } # buggy https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+is%3Aopen+nonminimal_bool
similar_names = { level = "allow", priority = 1 }
single_match = { level = "allow", priority = 1 }
single_match_else = { level = "allow", priority = 1 }
struct_excessive_bools = { level = "allow", priority = 1 }
struct_field_names = { level = "allow", priority = 1 }
too_many_arguments = { level = "allow", priority = 1 }
too_many_lines = { level = "allow", priority = 1 }
type_complexity = { level = "allow", priority = 1 }

[profile.release]
codegen-units = 1
lto = true
